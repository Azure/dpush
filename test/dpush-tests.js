/*

  WARNING: whenever you make any of the following changes:
  - product changes affecting wire protocols
  - adding tests
  - removing tests
  - reordering tests 
  you must regenerate the dpush-tests.nock.js file that contains
  the mocked HTTP requests and responses corresponding to the tests in this 
  file. The instructions are below.

  INSTRUCTIONS FOR RE-GENERATING THE dpush-tests.nock.js FILE:

  1. Make sure the tests are passing against live GCM endpoint:
  1.0. Make sure the apiKey and registrationId below are set to valid values. This likely means
       you need to create a new Google API project and generate a server API key as well as an Android
       client application that registers with GCM and obtains the registration Id. 
  1.1. Set the NOCK_OFF environment variable to `true`
  1.2. Run tests with `npm test`

  2. Re-run the tests against the live GCM endpoint while capturing the 
     HTTP traffic:
  2.1. Make sure NOCK_OFF is still set to `true`
  2.2. Set GCM_NOCK_REC to `true`
  2.3. Run the tests with `npm test`. The new dpush-tests.nock.js will be generated.

  3. Validate the new mocks:
  3.1. Unset both NOCK_OFF and GCM_NOCK_REC environment variables
  3.2. Run the tests with `npm test`. 

*/

var apiKey = 'AIzaSyAJa7YZ9fcDi6SZDAsUqH7_WpIxGDDqzwM';
var registrationId = 'APA91bG4R6JehqqPEbO93l699bnhFHDUd_E7V0_5KQ8sRPrhkqLfR7TgkiXI7YG6T0WBw3mqh0iwwnhbZNXJS4fIrmJCipp7hlA1CYK9AKTen3IeE5rvzBDTw_RdXXE_mRfsK-CNF3baPn4WPDf5E6UouUMrmWEBVVFEbxsHeRsOGLWgYvm9CCE';

var https = require('https'),
    http = require('http'),
    OriginalClientRequest = http.ClientRequest, // HTTP ClientRequest before mocking by Nock
    OriginalHttpsRequest = https.request,
    OriginalHttpRequest = http.request,
    nock = require('nock'),
    NockClientRequest = http.ClientRequest, // HTTP ClientRequest mocked by Nock
    NockHttpsRequest = https.request,
    NockHttpRequest = http.request,
    dpush = require('../lib/dpush.js'),
    assert = require('assert'),
    fs = require('fs');

var nocked = process.env.NOCK_OFF ? null : require('./dpush-tests.nock.js');

function nockHttp() {
    http.ClientRequest = NockClientRequest;
    http.request = NockHttpRequest;
    https.request = NockHttpsRequest;
};

function unNockHttp() {
    http.ClientRequest = OriginalClientRequest;
    http.request = OriginalHttpRequest;
    https.request = OriginalHttpsRequest;
};

unNockHttp(); // Revert the nock change so that tests by default run with the original, unmocked http request objects

var scopeWritten;

// plyfill appendFileSync
if (!fs.appendFileSync) {
  fs.appendFileSync = function (file, content) {
    var current = fs.readFileSync(file, 'utf8');
    current += content;
    fs.writeFileSync(file, current);
  }
}

var currentTest = 0;
function setupNock() {
  if (process.env.NOCK_OFF) {
    return [];
  }
  else if (currentTest < nocked.scopes.length) {
    return nocked.scopes[currentTest++].map(function (createScopeFunc) {
      return createScopeFunc(nock);
    });
  }
  else {
    throw new Error('It appears the dpush-tests.js file has more tests than there are mocked tests in dpush-tests.nock.js. '
      + 'You may need to re-generate the dpush-tests.nock.js using instructions in dpush-test.js.');
  }
}

function checkScopes(scopes) {
  scopes.forEach(function (scope) {
    assert.ok(scope.isDone());
  });
}

// once before suite runs
function beforeFunc(done) {
    if (process.env.GCM_NOCK_REC) {
      fs.writeFileSync(__dirname + '/dpush-tests.nock.js', 
        '// This file has been autogenerated.\n' +
        '// Check out dpush-tests.js for re-generation instructions.\n\n' +
        'exports.scopes = [');
    }

    done();
}

// once after suite runs
function afterFunc(done) {
    if (process.env.GCM_NOCK_REC) {
      fs.appendFileSync(__dirname + '/dpush-tests.nock.js', '];');
    }

    done();
}

// before every test
function setupFunc(done) {
    nockHttp();

    if (process.env.GCM_NOCK_REC) {
      // start nock recoding
      nock.recorder.rec(true);
    }

    done();
}

// after every test
function teardownFunc(done) {
    if (process.env.GCM_NOCK_REC) {
      // play nock recording
      var scope = scopeWritten ? ',\n[' : '[';
      var lineWritten;
      nock.recorder.play().forEach(function (line) {
        if (line.indexOf('nock') >= 0) {
          scope += (lineWritten ? ',\n' : '') + 'function (nock) { var result = ' + line + ' return result; }';
          lineWritten = true;
        }
      });

      if (lineWritten) {
          scope += ']';
          scopeWritten = true;
          fs.appendFileSync(__dirname + '/dpush-tests.nock.js', scope);
      }

      nock.recorder.clear();
    }

    unNockHttp();
    done();
}  

suite('dpush', function () {

    before(beforeFunc);
    after(afterFunc);
    setup(setupFunc);
    teardown(teardownFunc);

    test('send requires apiKey', function (done) {
        assert.throws(
            dpush.send, 
            /The first parameter must be the Google API key specified as a string/);
        done();
    });

    test('send requires apiKey to be a string', function (done) {
        assert.throws(
            function () {
                dpush.send(12);    
            },
            /The first parameter must be the Google API key specified as a string/);
        done();
    });

    test('send requires message to be a string or JSON object', function (done) {
        assert.throws(
            function () {
                dpush.send('12', '12', 12);    
            },
            /The message must be either a string or a JSON object with string properties/);
        done();
    });

    test('send requires callback to be a function', function (done) {
        assert.throws(
            function () {
                dpush.send('12', '12', '12', -1);    
            },
            /The optional callback must be a function/);
        done();
    });

    test('send sends notification without content', function (done) {
        var scopes = setupNock();
        dpush.send(apiKey, registrationId, function (error, result) {
            try {
                assert.ifError(error);
                assert.ok(typeof result === 'object', 'Result is an object');
                assert.equal(result.success, 1);
                assert.equal(result.failure, 0);
                assert.equal(result.canonical_ids, 0);
                assert.equal(result.invalidIds.length, 0);
                assert.equal(Object.getOwnPropertyNames(result.updatedIds).length, 0);
                checkScopes(scopes);
            }
            catch (e) {
                console.log('ERROR: ', error);
                console.log('RESULT: ', result);
                return done(e);
            }

            done();
        });    
    });

    test('send sends notification with string content', function (done) {
        var scopes = setupNock();
        dpush.send(apiKey, registrationId, 'a message', function (error, result) {
            try {
                assert.ifError(error);
                assert.ok(typeof result === 'object', 'Result is an object');
                assert.equal(result.success, 1);
                assert.equal(result.failure, 0);
                assert.equal(result.canonical_ids, 0);
                assert.equal(result.invalidIds.length, 0);
                assert.equal(Object.getOwnPropertyNames(result.updatedIds).length, 0);
                checkScopes(scopes);
            }
            catch (e) {
                console.log('ERROR: ', error);
                console.log('RESULT: ', result);
                return done(e);
            }

            done();
        });    
    });

    test('send sends notification with JSON content', function (done) {
        var scopes = setupNock();
        dpush.send(apiKey, registrationId, { symbol: 'msft', price: '26.00' }, function (error, result) {
            try {
                assert.ifError(error);
                assert.ok(typeof result === 'object', 'Result is an object');
                assert.equal(result.success, 1);
                assert.equal(result.failure, 0);
                assert.equal(result.canonical_ids, 0);
                assert.equal(result.invalidIds.length, 0);
                assert.equal(Object.getOwnPropertyNames(result.updatedIds).length, 0);
                checkScopes(scopes);
            }
            catch (e) {
                console.log('ERROR: ', error);
                console.log('RESULT: ', result);
                return done(e);
            }

            done();
        });    
    });

    test('send sends notification to two recipients: valid and invalid', function (done) {
        var scopes = setupNock();
        dpush.send(
            apiKey, 
            [ registrationId, 'invalid registration id' ], 
            { symbol: 'msft', price: '26.00' }, 
            function (error, result) {
                try {
                    assert.ifError(error);
                    assert.ok(typeof result === 'object', 'Result is an object');
                    assert.equal(result.success, 1);
                    assert.equal(result.failure, 1);
                    assert.equal(result.canonical_ids, 0);
                    assert.equal(result.invalidIds.length, 1);
                    assert.equal(result.invalidIds[0], 'invalid registration id');
                    assert.equal(Object.getOwnPropertyNames(result.updatedIds).length, 0);
                    checkScopes(scopes);
                }
                catch (e) {
                    console.log('ERROR: ', error);
                    console.log('RESULT: ', result);
                    return done(e);
                }

                done();
            }
        );    
    });

    test('send sends notification with invalid API key', function (done) {
        var scopes = setupNock();
        dpush.send(
            'invalid API key', 
            registrationId,
            function (error, result) {
                try {
                    assert.ok(typeof error === 'object', 'Error is an object');
                    assert.ok(typeof result === 'undefined', 'Result is undefined');
                    assert.ok(error.message.match(/GCM returned an error/));
                    assert.ok(error.message.match(/Status code: 401/));
                    checkScopes(scopes);
                }
                catch (e) {
                    console.log('ERROR: ', error);
                    console.log('RESULT: ', result);
                    return done(e);
                }

                done();
            }
        );    
    }); 

    test('sendAdvanced requires apiKey', function (done) {
        assert.throws(
            dpush.sendAdvanced, 
            /The first parameter must be the Google API key specified as a string/);
        done();
    });

    test('sendAdvanced requires apiKey to be a string', function (done) {
        assert.throws(
            function () {
                dpush.sendAdvanced(12);    
            },
            /The first parameter must be the Google API key specified as a string/);
        done();
    });

    test('sendAdvanced requires message to be a JSON object', function (done) {
        assert.throws(
            function () {
                dpush.sendAdvanced('12', '12');    
            },
            /The second paramater must be message payload specified as a JSON object/);
        done();
    });

    test('sendAdvanced requires retryCount to be a number', function (done) {
        assert.throws(
            function () {
                dpush.sendAdvanced('12', {}, 'abc');    
            },
            /The optional retryCount must be a non-negative number/);
        done();
    });

    test('sendAdvanced requires retryCount to be a positive number', function (done) {
        assert.throws(
            function () {
                dpush.sendAdvanced('12', {}, -1);    
            },
            /The optional retryCount must be a non-negative number/);
        done();
    });    

    test('sendAdvanced requires callback to be a function', function (done) {
        assert.throws(
            function () {
                dpush.sendAdvanced('12', {}, 1, -1);    
            },
            /The optional callback must be a function/);
        done();
    });

    test('sendAdvanced sends notification without content', function (done) {
        var scopes = setupNock();
        dpush.sendAdvanced(
            apiKey, 
            {
                registration_ids: [ registrationId ] 
            }, 
            function (error, result) {
                try {
                    assert.ifError(error);
                    assert.ok(typeof result === 'object', 'Result is an object');
                    assert.equal(result.success, 1);
                    assert.equal(result.failure, 0);
                    assert.equal(result.canonical_ids, 0);
                    assert.equal(result.invalidIds.length, 0);
                    assert.equal(Object.getOwnPropertyNames(result.updatedIds).length, 0);
                    checkScopes(scopes);
                }
                catch (e) {
                    console.log('ERROR: ', error);
                    console.log('RESULT: ', result);
                    return done(e);
                }

                done();
            }
        );    
    });

    test('sendAdvanced sends notification with content', function (done) {
        var scopes = setupNock();
        dpush.sendAdvanced(
            apiKey, 
            {
                registration_ids: [ registrationId ],
                data: {
                    'message': 'a message'
                }
            }, 
            function (error, result) {
                try {
                    assert.ifError(error);
                    assert.ok(typeof result === 'object', 'Result is an object');
                    assert.equal(result.success, 1);
                    assert.equal(result.failure, 0);
                    assert.equal(result.canonical_ids, 0);
                    assert.equal(result.invalidIds.length, 0);
                    assert.equal(Object.getOwnPropertyNames(result.updatedIds).length, 0);
                    checkScopes(scopes);
                }
                catch (e) {
                    console.log('ERROR: ', error);
                    console.log('RESULT: ', result);
                    return done(e);
                }

                done();
            }
        );    
    });

    test('sendAdvanced sends notification to two recipients: valid and invalid', function (done) {
        var scopes = setupNock();
        dpush.sendAdvanced(
            apiKey, 
            {
                registration_ids: [ registrationId, 'invalid registration id' ],
                data: {
                    'message': 'a message'
                }
            }, 
            function (error, result) {
                try {
                    assert.ifError(error);
                    assert.ok(typeof result === 'object', 'Result is an object');
                    assert.equal(result.success, 1);
                    assert.equal(result.failure, 1);
                    assert.equal(result.canonical_ids, 0);
                    assert.equal(result.invalidIds.length, 1);
                    assert.equal(result.invalidIds[0], 'invalid registration id');
                    assert.equal(Object.getOwnPropertyNames(result.updatedIds).length, 0);
                    checkScopes(scopes);
                }
                catch (e) {
                    console.log('ERROR: ', error);
                    console.log('RESULT: ', result);
                    return done(e);
                }

                done();
            }
        );    
    });

    test('sendAdvanced sends notification without recipients', function (done) {
        var scopes = setupNock();
        dpush.sendAdvanced(
            apiKey, 
            {
                data: {
                    'message': 'a message'
                }
            }, 
            function (error, result) {
                try {
                    assert.ok(typeof error === 'object', 'Error is an object');
                    assert.ok(typeof result === 'undefined', 'Result is undefined');
                    assert.ok(error.message.match(/GCM returned an error/));
                    assert.ok(error.message.match(/Missing "registration_ids" field/));
                    checkScopes(scopes);
                }
                catch (e) {
                    console.log('ERROR: ', error);
                    console.log('RESULT: ', result);
                    return done(e);
                }

                done();
            }
        );    
    });

    test('sendAdvanced sends notification with invalid API key', function (done) {
        var scopes = setupNock();
        dpush.sendAdvanced(
            'invalid API key', 
            {
                registration_ids: [ registrationId ],
                data: {
                    'message': 'a message'
                }
            }, 
            function (error, result) {
                try {
                    assert.ok(typeof error === 'object', 'Error is an object');
                    assert.ok(typeof result === 'undefined', 'Result is undefined');
                    assert.ok(error.message.match(/GCM returned an error/));
                    assert.ok(error.message.match(/Status code: 401/));
                    checkScopes(scopes);
                }
                catch (e) {
                    console.log('ERROR: ', error);
                    console.log('RESULT: ', result);
                    return done(e);
                }

                done();
            }
        );    
    }); 

});
